Standard Actions:

    Bean
    <jsp:useBean ... />
    <jsp:getProperty ... />
    <jsp:setProperty ... />

    On useBean
    if you declare a bean with useBean and the identifier (set by id) is not found within the set
    scope, the bean will be created and hold default values (if any are set)

    If in case you want to set a value if no value is found, then your useBean can have a body containing
    the setProperty. And that will only run if it has to make a new bean.

    On setProperty and getProperty
    If you arrived to the JSP straight from the form, you can use
    <jsp:setProperty name="..." property="*" />
    to map requests with the same name as your bean's fields. Said bean is assumed to be declared earlier on using useBean
    getProperty does not have an equivalent to this. I thought maybe I could use the wildcard to print out the values of 
    a bean using getProperty, but you'll just get an error:
    org.apache.jasper.JasperException: Cannot find any information on property '*' in a bean of type ...


Here's something from chatGPT. This is related to having a Parent class (Person) and a Child (Employee) where Person
has the name field and Employee has the empID field. Both classes have the getters and setters.

    In JavaServer Pages (JSP), the <jsp:getProperty> action behaves differently depending on the type of the object 
    it's working with. Here's why you're observing different behavior:

    JSP Action and Java Casting:
    When you use <jsp:getProperty> with name="personB" and property="name", it's effectively calling the getName() method 
    of the personB object, which is of type Person.
    In this case, JSP automatically generates code that calls personB.getName(), and since Person has a getName() method, 
    it "just works."
    
    Scriptlet and Java Casting:
    In the scriptlet implementation, you're trying to call personB.getEmpID(). However, personB is of type Person, 
    which doesn't have a getEmpID() method.
    To overcome this, you explicitly cast personB to Employee before calling getEmpID(). 
    This casting tells the compiler that personB is actually an Employee and allows you to call the getEmpID() method.
    
    Automatic Type Conversion in <jsp:getProperty>:
    The <jsp:getProperty> action is designed to automatically perform type conversions if necessary. 
    It uses JavaBeans conventions to determine property types and methods.
    When you specify property="empID" in <jsp:getProperty>, JSP looks for a method named getEmpID() in the personB object. 
    If such a method exists, it will be called even if personB is declared as a Person object in the <jsp:useBean> tag.
    In your case, since personB is an instance of Employee, it has a getEmpID() method, 
    and <jsp:getProperty> successfully calls it.
    So, <jsp:getProperty> dynamically determines the object's actual type at runtime and invokes the corresponding 
    getter method. This behavior allows you to use it in a way that's more abstract and doesn't require explicit casting 
    in most cases.

    In contrast, scriptlets don't perform this automatic type conversion, so you need to cast the object explicitly to 
    its actual type to access its methods.

So it's explained that getProperty is set to deal with conversion automatically. 
Since scriptlets contain regular java code, you'll just have to cast it yourself.

Also had another chat with the AI, it says that getProperty's property attribute is designed for direct attributes, 
which is why if you want to access an attribute that has its own attributes, you'll have to set the name attribute
of getProperty so that it's already at that attribute which was its own attributes. But again, it's only 1 level deep.

^ The book also just says this. Don't know why I had to use chatGPT. I could have just understood what I read.

By the way, found the JSP naming convention doc.
https://www.oracle.com/technical-resources/articles/javase/code-convention.html
Just CTRL+F "JSP Names".
Summary, it's camelCase (lowercase starting letter). Avoid verbs as names.

I have JSPs that don't follow this. Moving forward in the next project, I'll keep this in mind.

p.408
Regarding EL and brackets. A bracket containing a String value if it belongs to an array or list, is coerced into an
integer. If it can't be coerced, an error is thrown.

p.426
This sees an addition to the project structure.
For now I'm going to put java classes made to be used as ELs under the model folder. 
(the book didn't specify a specific folder, just that it'd be under classes)
And then the tlds will be placed under etc (since the book says it's under WEB-INF in deployment)

p.436
If you want to make reusable templace pieces, you can create those pieces
(remember to omit <html><body></body></html>, since it's a fragment expected to be used in a complete page 
that should already be under those tags).
Include them in your page using one of two ways:
    using the include directive -> <%@ include file="[...].jsp or html" %>
        ^ for static pages, everything is prepared at translation time
        the source html from the included file is made part of the main page, so only the first visit is burdened
        since the main page will be translated with the included files already in the page, which is why this is more
        for static content
        *a container can possibly automatically update the main page's jsp if it detects that the included file
        has changed
    using the include standard action -> <jsp:include page="[...].jsp or html" />
        ^ for dynamic pages and stuff that you expect to update after deployment, everything is prepared at runtime
        meaning every time you visit the main page, it will always fetch the included page
        *this has the added advandace of accepting parameters for dynamic content on the page
        <jsp:include page="[...].jsp or html">
            <jsp:param name="nameOfParamToBeUsedAsReferenceInPage" value="theValue" />
        </jsp:include>
        and then within the included page, you can reference the request param as usual;
        here's EL: ${param.nameOfParamToBeUsedAsReferenceInPage}

You can use (but you shouldn't unless you really can't since this should be something handled by the controller,
not the view) <jsp:forward="..." /> to let the view handle the redirect if in case a certain condition isn't met.
To do this, you're adding a scriptlet to house the conditional as well 
(later it's discussed how to do conditionals without needing to use jsp scriptlets).

With regards to the <jsp:forward>, the buffer is cleared BEFORE the forward. This means that any content that's found
in the page before the <jsp:forward> occurs is not going to show up on the page at all.

Might help (regarding flushing the buffer and clearing the response):
https://coderanch.com/t/293390/java/clearing-flushing-buffer-committing-response