General Notes on the include directive and how it deals with variables
[[fill this in please]]

(p. 538)
The book goes out of its way to say that the name/value pair for <jsp:param> looks to the web-app as though it came in 
with a form submission, and because it does that (goes in as a request parameter and not a request-scoped attribute), it's
one reason they DON'T like using it. Because it's a broad scope, what's only meant for the included file is visible to any 
component in the web app that is a part of the request.
And then they go on to say that this is a nice clean thing about tag attributes for Tag files in that they are scoped
specifically for the tag.

The only follow-up I now have is that I'm under the impression that a tag file is the older but more flexible way to go about 
creating custom tags. < (Coming back to this now, I've realized that this is probably wrong.) 

It looks like tag files have their own stuff made for them:
<%@ attribute name=”subTitle” required=”true” rtexprvalue=”true” %>
    ^ how you declare a tag attribute (put this in the tag file)

<jsp:doBody/> 
    ^ takes whatever is in the body of the tag used to invoke this tag file and stick it there (put this in the tag file)
    v what the invoker looks like
<myTags:Header>
We take the sting out of SOAP. OK, so it’s not Jini,<br>
but we’ll help you get through it with the least<br> 
frustration and hair loss.
</myTags:Header>

<%@ tag body-content=”tagdependent” %>
^ how to declare body-content type (put this in the tag file)

(p. 546)
Tag files implement the tag functionality with another page (using JSP).
Tag handlers implement the tag functionality with a special Java class.
Tag handlers come in two flavors: Simple and Classic.