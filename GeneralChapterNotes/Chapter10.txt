General Notes on the include directive and how it deals with variables
[[fill this in please]]

(p. 538)
The book goes out of its way to say that the name/value pair for <jsp:param> looks to the web-app as though it came in 
with a form submission, and because it does that (goes in as a request parameter and not a request-scoped attribute), it's
one reason they DON'T like using it. Because it's a broad scope, what's only meant for the included file is visible to any 
component in the web app that is a part of the request.
And then they go on to say that this is a nice clean thing about tag attributes for Tag files in that they are scoped
specifically for the tag.

The only follow-up I now have is that I'm under the impression that a tag file is the older but more flexible way to go about 
creating custom tags. < (Coming back to this now, I've realized that this is probably wrong.) 

It looks like tag files have their own stuff made for them:
<%@ attribute name=”subTitle” required=”true” rtexprvalue=”true” %>
    ^ how you declare a tag attribute (put this in the tag file)

<jsp:doBody/> 
    ^ takes whatever is in the body of the tag used to invoke this tag file and stick it there (put this in the tag file)
    v what the invoker looks like
<myTags:Header>
We take the sting out of SOAP. OK, so it’s not Jini,<br>
but we’ll help you get through it with the least<br> 
frustration and hair loss.
</myTags:Header>

<%@ tag body-content=”tagdependent” %>
^ how to declare body-content type (put this in the tag file)

(p. 546)
Tag files implement the tag functionality with another page (using JSP).
Tag handlers implement the tag functionality with a special Java class.

The idea is sort of like if you want to just do a very customized include, you go for tag files.
If you find yourself needing to use scriplets in your jsp but still want to use tags, you should start
looking at a custom tag handler. This way the custom tag handler can handle all the java logic necessary without needing
to clutter the jsp with any scriptlets.

Tag handlers come in two flavors: Simple and Classic (what existed before JSP 2.0).
Apparently, Simple should cover most of what needs to be done and it's way more convenient.
Classic is taught at this point since you might run into it and there are rare scenarios where it is the best choice.
Hopefully those rare scenarios are explained.


Something interesting from chatgpt. This is a snippet from me asking it why 
EL could not recognize the variables created in the scriptlet:

However, EL (Expression Language) operates differently. 
EL is used to evaluate expressions within the context of implicit objects, JavaBeans, or other scoped attributes. 
EL expressions ${} are evaluated at runtime, and they don't directly access or reference Java variables declared 
within scriptlets.

-
Unlike Simple tag handlers which are never reused, a Classic tag handler can be pooled and reused by the Container.
This explains why variables are reinitialized inside the doStartTag method to guarantee that the values are always reset.

(p. 604)
Simple tags can have classic parents and simple tags.
Classic tags can have classic parents.
THEY CAN have simple parents, but the book does not cover it. It does point to the TagAdapter class as a means to
accomplish this.

(p. 608)
The book has shown that there is a way to get the first instance of an arbitrary ancestory. 
It just looks up the nested chain until it finds the first instance of the class you are looking for and returns that.
It's available for both Classic and Simple tags.

From Mock Exam (also probably should note the key differences between the different tag models)
- Simple tags cannot have a body that includes a JSP expression tag
